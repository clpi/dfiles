# kakoune (kak) configuration [~/.config/kak/kakrc]
# chris pecunies 2021 [clp.is] [clp@clp.is]
# 
#      ------
hook global BufCreate .* %[
    add-highlighter buffer/ number-lines -relative -hlcursor
    add-highlighter buffer/ wrap
    add-highlighter global/ show-whitespaces
    set-option global ui_options ncurses_assistant=dilbert
]
# Set jumpclient
set-option global jumpclient jump
# Set toolsclient
set-option global toolsclient tools
# Set docsclient
set-option global docsclient docs
# Create client with name
# keep space around cursor
set-option global scrolloff 10,10

# save on pressing enter
hook global NormalKey <ret> w
#
# # remap grep-jump
map global goto <ret> "<esc><ret>"
#
# # vim old habits
map global normal D '<a-l>d' -docstring 'delete to end of line'
map global normal Y '<a-l>y' -docstring 'yank to end of line'
map global normal <a-h> Gi`

define-command -docstring "Open a new client with the given name" \
new-client -params 1 %{
     new rename-client %arg{1}
 }
set-option global tabstop     4
set-option global indentwidth 4


# case insensitive search
map global prompt <a-i> "<home>(?i)<end>"

# user mappings
map global user l -docstring 'lsp' ': enter-user-mode lsp<ret>'
define-command paste %{
    evaluate-commands -save-regs ^ %{
        # Paste command
        execute-keys "!pbpaste<ret>"
        # Select command
        execute-keys uU
        # Save selection
        execute-keys -save-regs "" Z
        try %{
            #Remove cariage return before newline
            execute-keys "s\r\n<ret>hd"
        }
        try %{
            #Replace cariage return elsewhere with newline
            execute-keys "zs\r<ret>r<return>"
        }
        #Restore selection
        execute-keys z
    }
}
# clipboard interaction
map global user p -docstring 'paste from clipboard' ': paste<ret>'
map global user y -docstring 'copy to clipboard' '<a-|>pbcopy<ret>'
map global user d -docstring 'cut to clipboard' '|pbcopy<ret>'
# format
#  map global user f -docstring 'format buffer' ':format<ret>'
define-command comment %{
     try %{
          execute-keys _
          comment-block
     } catch comment-line
}
define-command -hidden ctags-search-word %{
    try %{
        execute-keys <a-i>w
    }
    execute-keys ": ctags-search "
}
# comment lines
map global user c -docstring 'comment lines' %{: comment<ret>}
# search with c tags
map global goto s -docstring 'search ctags' %{<esc>: ctags-search-word<ret>}
# Delete buffer and quit
map global normal <c-q> ": db;q<ret>"
# Open file in new window
define-command open-in-new-window -params .. -file-completion %{ new edit "%arg{@}"}
alias global e open-in-new-window
# Terminal, used by ide wrapper
define-command _terminal -params .. %{
    shell \
    -export session \
    -export client \
    %sh(echo $TERMINAL) -e %arg(@) \
    %sh(test $# = 0 && echo $SHELL )
}
     

#evaluate-commands %sh{
    #plugins="$kak_config/plugins"
    #mkdir -p "$plugins"
    #[ ! -e "$plugins/plug.kak" ] && \
    #git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    #printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
#}

source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/plug.kak" noload
# plug "andreyorst/fzf.kak" config fzf %{
   # map -docstring 'fzf mode' global normal '<c-p>' ': fzf-mode<ret>'
   # map -docstring 'fzf mode' global normal '<c-f><c-f>' ': fzf-mode<ret>'
   # map -docstring 'fzf mode' global normal '<space>ff' ': fzf-mode<ret>'
# } defer fzf  %{
   # set-option global fzf_preview_width '65%'
   # set-option global fzf_project_use_tilda false
# }
plug "andreyorst/kaktree" config %{
    hook global WinSetOption filetype=kaktree %{
        remove-highlighter buffer/numbers
        remove-highlighter buffer/matching
        remove-highlighter buffer/wrap
        remove-highlighter buffer/show-whitespaces
    }
    kaktree-enable
}
plug "caksoylar/kakoune-smooth-scroll" config %{
 # configuration here
# }
plug 'delapouite/kakoune-buffers' %{
    map global normal ^ q
    map global normal <a-^> Q
    map global normal q b
    map global normal Q B
    map global normal <a-q> <a-b>
    map global normal <a-Q> <a-B>
    # map global normal b ': enter-buffers-mode<ret>' -docstring 'buffers'
    # map global normal B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
}

plug "raiguard/one.kak"
plug "alexherbo2/auto-pairs.kak"
plug "alexherbo2/prelude.kak"
plug "andreyorst/powerline.kak" defer powerline %{
    powerline-format global 'lsp git bufname filetype mode_info line_column position'
    powerline-toggle 
    line_column off
} defer powerline_bufname %{
    set-option global powerline_shorten_bufname 'short'
} defer powerline_palenight %{
    powerline-theme palenight

} config %{
    powerline-start
}

plug "andreyorst/tagbar.kak" defer "tagbar" %{
   set-option global tagbar_sort false
   set-option global tagbar_size 40
   set-option global tagbar_display_anon false
} config %{
}

plug "robertmeta/connect.kak" %{
    require-module connect
}
plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global softtabstop 4
    expandtab
} config %{
    hook global WinSetOption filetype=(python|zig|rust|markdown|kak|lisp|scheme|sh|perl) expandtab
    hook global WinSetOption filetype=(makefile|gas|go) noexpandtab
    hook global WinSetOption filetype=(c|cpp) smarttab
}

plug "kak-lsp/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path .
} config %{
    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'

    define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
    define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
    define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

    hook global WinSetOption filetype=(c|cpp|cc|rust|crystal|nim|ruby|zig|javascript|typescript) %{
        #set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        lsp-auto-hover-enable
        echo -debug "Enabling LSP for filtetype %opt{filetype}"
        lsp-enable-window
        lsp-auto-signature-help-enable
        # lsp-auto-hover-insert-mode-disable
    }
    hook global WinSetOption filetype=(rust) %{
	     set window lsp_server_configuration rust.clippy_preference="on"
    }
    hook global WinSetOption filetype=rust %{
        hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
        hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
        hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
        hook -once -always window WinSetOption filetype=.* %{
            remove-hooks window rust-inlay-hints
        }
    }

    hook global WinSetOption filetype=zig %{
set-option buffer formatcmd 'zig fmt --stdin'
        #set-option window lsp_auto_highlight_references true
        set-option global lsp_server_configuration zls.zig_lib_path="/usr/lib/zig"
        set-option -add global lsp_server_configuration zls.warn_style=true
        set-option -add global lsp_server_configuration zls.enable_semantic_tokens=true
        hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
        hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
        hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
        #hook -once -always window WinSetOption filetype=.* %{
            #remove-hooks window semantic-tokens
        #}
    }
    hook global WinSetOption filetype=rust %{
	    hook window BufWritePre .* %{
            evaluate-commands %sh{
                test -f rustfmt.toml && printf lsp-formatting-sync
            }
        }
    }
    
    hook global KakEnd .* lsp-exit
}

# add-highlighter global/ show-matching
# set-option global ui_options ncurses_assistant=off
# Use ripgrep instead of grep
            # 
set global grepcmd 'rg -n'
enable-auto-pairs
tagbar-enable



# Open and source Kakoune files.
define-command -override edit-kakrc -docstring 'open kakrc' %{
  edit "%val{config}/kakrc"
 }

define-command -override edit-kak-lsp  -docstring 'edit kak-lsp config' %{
  edit "%val{config}/../kak-lsp/kak-lsp.toml"
 }

 define-command -override edit-kak-lsp -docstring 'edit snippets.kak file' %{
  edit "~/.config/kak-lsp/kak-lsp.toml"
 }


hook global WinCreate [^*].* %{
    hook -once window WinDisplay .* %{
        smooth-scroll-enable
    }
}



# map-sequence global kj %{exec <esc>}
# map-sequence global jj %{exec <esc><esc><esc>}
map global normal '<c-d>' ': select-or-add-cursor<ret>' -docstring "add cursor on current word, and jump to the next match" 

# ------------- LSP -----------------
#eval %sh{kak-lsp --kakoune -s $kak_session}

#hook global WinSetOption filetype=(cpp|zig|rust|nim|crystal) %{
    #lsp-enable-window
    #lsp-auto-hover-enable
    #lsp-auto-signature-help-enable
    #lsp-auto-hover-insert-mode-enable
#}
# declare-cursor-character-unicode
set-option global modelinefmt '%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - U+%opt{cursor_character_unicode} - %val{client}@%val{session}'


colorscheme ayu-mirage;
